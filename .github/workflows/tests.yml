name: Tests
on: [pull_request]
jobs:
  echo-pull-request-event:
    runs-on: ubuntu-latest
    name: hello
    steps:
      - name: Echo github obj
        run: echo ${{ toJson(github) }}
        continue-on-error: true
        # labels=$( ${{ github.event.pull_request.labels }} | jq '. map(select(.name | startswith ("p: "))) | .[] .description' )
      - name: Labels
        id: get-labels
        run: |
          labels= ${{ toJson(github.event.pull_request.labels) }}
          echo $labels
          echo "::set-output name=labels::$labels"
        # run: |
        #   labels=$( '${{ toJson(github.event.pull_request.labels) }}' | jq '. map(select(.name | startswith ("p: "))) | .[] .description' )
        #   echo $labels
        #   echo "::set-output name=labels::$labels"
  # echo "`jq '. map(select(.label | startswith ("p: "))) | .[] .description' ${{github.event.labels}}`"
  # checkLabels:
  #   runs-on: ubuntu-latest
  #   if: ${{ startsWith(github.event.labels.*.name, 'p:') }}
  # tests:
  #   needs: [checkLabels]
  #   strategy:
  #     matrix:
  #       label: ${{ github.event.pull_request.labels.*.name.filter((name) => name.startsWith('p:')).map((name) => name.substring(3)) }}
  #   runs-on: ubuntu-latest
  #   name: Tests
  #   steps:
  #     - name: Print label
  #       run: echo Hello world "${{matrix.label}}"
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v1
  #     # - id: get-directory
  #     #   uses: actions/github-script@v5
  #     #   with:
  #     #     result-encoding: string
  #     #     script: |
  #     #       context.
  #     # - run: flutter pub get
  #     #   working-directory: ./package/${{ matrix.label }}
  #     # - name: Run tests
  #     #   run: flutter test
  #     #   working-directory: ./package/${{ matrix.label }}
  changed-files:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      all: ${{ steps.changes.outputs.all}}
      dart: ${{ steps.changes.outputs.ts }}
    steps:
      # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changes
        # Set outputs using the command.
        run: |
          echo "::set-output name=all::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs)"
          echo "::set-output name=dart::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep .dart$ | xargs)"
          echo "::set-output name=folders::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep ^packages | cut -d/ -f 1-2| uniq | xargs) "
      - name: echo all changed files
        run: |
          echo ${{  steps.changes.outputs.all }}
          echo ${{  steps.changes.outputs.dart }}
          echo ${{  steps.changes.outputs.folders }}
